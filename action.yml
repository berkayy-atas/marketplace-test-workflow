name: 'MyApp Backup Action'
description: 'Repository mirror backup, ZSTD compression, and API upload. Optionally uses org ID.'
branding:
  icon: 'archive'
  color: 'blue'

inputs:
  activation_code:
    description: 'Activation code for API'
    required: true
  encryption_password:
    description: 'Secret key for encrypting the backup (min. 32 chars)'
    required: true
 
    
runs:
  using: 'composite'
  steps:
  
    - name: Validate encryption password length
      shell: bash
      run: |
        ENC_KEY="${{ inputs.encryption_password }}"
        if [ "${#ENC_KEY}" -lt 32 ]; then
          echo "::error ::The encryption_password must be at least 32 characters long (got ${#ENC_KEY})."
          exit 1
        fi
        
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Configure Repository for Full Mirror
      shell: bash
      run: |
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git config remote.origin.tagopt --tags
        git fetch origin --prune --tags --force
        
        git for-each-ref --format='%(refname:short)' refs/remotes/origin | grep -v HEAD | while read branch; do
            b=${branch#origin/}
            if ! git show-ref --quiet refs/heads/"$b"; then
                git branch "$b" "$branch"
            fi
        done

    - name: Clone Repository in Mirror Mode
      shell: bash
      run: |
        git clone --mirror . repo-mirror
        cd repo-mirror
        echo "--- Mirror Branches ---"
        git branch -a
        echo "--- Mirror Tags ---"
        git tag -l

    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y zstd jq

        
    - name: Encrypt Compressed Repository
      shell: bash
      run: |
        REPO_NAME=$(basename "${{ github.repository }}")
        ENC_FILE_NAME="$REPO_NAME.tar.zst.enc"

        tar -cf repo.tar repo-mirror
        zstd -9 repo.tar -o repo.tar.zst
        openssl enc -aes-256-cbc -salt -pbkdf2 -in repo.tar.zst -out "$ENC_FILE_NAME" -pass pass:${{ inputs.encryption_password }}

        echo "ENC_FILE_NAME=$ENC_FILE_NAME" >> $GITHUB_ENV
        echo "UNCOMPRESSED_SIZE=$(stat --printf='%s' repo.tar)" >> $GITHUB_ENV
        echo "COMPRESSED_SIZE=$(stat --printf='%s' repo.tar.zst.enc)" >> $GITHUB_ENV


    - name: Get Activation Token
      shell: bash
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://dev.api.file-security.icredible.com/endpoint/activation" \
        -H "Content-Type: application/json" \
        -d '{
          "activationCode": "${{ inputs.activation_code }}",
          "uniqueId": "${{ github.repository_id }}",
          "ip": "${{ runner.ip }}",
          "operatingSystem": "Linux",
          "endpointType": "Workstation",
          "endpointName": "Github Endpoint (${{ github.repository }})"
        }')
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Activation failed: $JSON_BODY"
          exit 1
        fi

        echo "endpointId=$(echo "$JSON_BODY" | jq -r '.data.endpointId')" >> $GITHUB_ENV
        echo "TOKEN=$(echo "$JSON_BODY" | jq -r '.data.token')" >> $GITHUB_ENV

    - name: Upload Backup to Shield API (with dynamic commit meta)
      id: shieldRequest
      shell: bash
      run: |
        EVENT="${{ github.event_name }}"
        REF="${{ github.ref }}"
        ACTOR="${{ github.actor }}"
        OWNER="${{ github.repository_owner }}"
        OWNER_TYPE="${{ github.event.repository.owner.type }}"
        
        if git rev-parse --verify HEAD >/dev/null 2>&1; then
          COMMIT=$(git log -1 --pretty=format:"%H")
          SHORT=$(git log -1 --pretty=format:"%h")
          PARENTS=$(git log -1 --pretty=format:"%P")
          AUTHOR=$(git log -1 --pretty=format:"%an <%ae>")
          DATE=$(git log -1 --pretty=format:"%ad")
          COMMITTER=$(git log -1 --pretty=format:"%cn")
          MESSAGE=$(git log -1 --pretty=format:"%s%n%b")
        else
          COMMIT=""
          SHORT=""
          PARENTS=""
          AUTHOR=""
          DATE=""
          COMMITTER=""
          MESSAGE=""
        fi
        
        CURL_ARGS=(
          -F "MetaData[Event]=$EVENT"
          -F "MetaData[Ref]=$REF"
          -F "MetaData[Actor]=$ACTOR"
          -F "MetaData[Owner]=$OWNER"
          -F "MetaData[OwnerType]=$OWNER_TYPE"
        )
        [ -n "$COMMIT" ] && CURL_ARGS+=(-F "MetaData[Commit]=$COMMIT")
        [ -n "$SHORT" ] && CURL_ARGS+=(-F "MetaData[CommitShort]=$SHORT")
        [ -n "$PARENTS" ] && CURL_ARGS+=(-F "MetaData[Parents]=$PARENTS")
        [ -n "$AUTHOR" ] && CURL_ARGS+=(-F "MetaData[Author]=$AUTHOR")
        [ -n "$DATE" ] && CURL_ARGS+=(-F "MetaData[Date]=$DATE")
        [ -n "$COMMITTER" ] && CURL_ARGS+=(-F "MetaData[Committer]=$COMMITTER")
        [ -n "$MESSAGE" ] && CURL_ARGS+=(-F "MetaData[Message]=$MESSAGE")


        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          "https://dev.api.file-security.icredible.com/backup/shield" \
          -H "Authorization: Bearer $TOKEN" \
          -F "file=@$ENC_FILE_NAME" \
          -F "Size=$UNCOMPRESSED_SIZE" \
          -F "CompressedFileSize=$COMPRESSED_SIZE" \
          -F "Attributes=32" \
          -F "FileName=${{ github.repository }}" \
          -F "CompressionEngine=None" \
          -F "CompressionLevel=NoCompression" \
          -F "FullPath=/${{ github.repository }}/repo.tar.zst" \
          -F "encryptionType=None" \
          -F "RevisionType=1" \
          "${CURL_ARGS[@]}"
        )
        
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        JSON_BODY=$(echo "$RESPONSE" | head -n -1)
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Upload failed: $JSON_BODY"
          exit 1
        fi
       
        echo "recordId=$(echo "$JSON_BODY" | jq -r '.data.recordId')" >> $GITHUB_ENV
        echo "directoryRecordId=$(echo "$JSON_BODY" | jq -r '.data.directoryRecordId')" >> $GITHUB_ENV

        echo "commit=$COMMIT" >> $GITHUB_ENV
        echo "commitShort=$SHORT" >> $GITHUB_ENV
        echo "parents=$PARENTS" >> $GITHUB_ENV
        echo "author=$AUTHOR" >> $GITHUB_ENV
        echo "date=$DATE" >> $GITHUB_ENV
        echo "committer=$COMMITTER" >> $GITHUB_ENV
        echo "message=$(git log -1 --pretty=format:"%s%n%b" | tr '\n' ' ')" >> $GITHUB_ENV
        
        echo "Backup uploaded successfully."

    - name: Print Backup Summary
      shell: bash
      run: |
        UPLOAD_METADATA=""
        if [ -n "${{ env.commit }}" ]; then
          UPLOAD_METADATA=$(cat <<EOF
          --------------------------------------------------
          **Upload Metadata**
          - Commit:      ${{ env.commit }}
          - CommitShort: ${{ env.commitShort }}
          - Parents:     ${{ env.parents }}
          - Author:      ${{ env.author }}
          - Date:        ${{ env.date }}
          - Committer:   ${{ env.committer }}
          - Message:     ${{ env.message }}
EOF
)
        fi

        SUMMARY=$(cat <<EOF
        âœ… **Backup completed successfully!**
        --------------------------------------------------
        **Git Metadata**
        Repository: ${{ github.repository }}
        - Owner: ${{ github.repository_owner }} [${{ github.event.repository.owner.type }}]
        - Event: ${{ github.event_name }}
        - Ref:   ${{ github.ref }}
        - Actor: ${{ github.actor }}

        ${UPLOAD_METADATA}
        --------------------------------------------------
        **API Response**
        - File version id: ${{ env.recordId }}
        - You can access the shielded file from this link : https://dev.management.file-security.icredible.com/dashboard/file-management/${{ env.endpointId }}/${{ env.directoryRecordId }}
  EOF
  )

        MESSAGE="${SUMMARY//'%'/'%25'}"
        MESSAGE="${MESSAGE//$'\n'/'%0A'}"
        MESSAGE="${MESSAGE//$'\r'/'%0D'}"
        
        echo "::notice::$MESSAGE"
